import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Chart, ChartConfiguration, ChartType, BarController, BarElement, CategoryScale, LinearScale } from 'chart.js';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

// Register the required chart components
Chart.register(BarController, BarElement, CategoryScale, LinearScale);

@Component({
  selector: 'app-vulnerability-chart',
  standalone: true,
  imports: [
    CommonModule,
    MatCardModule,
    MatIconModule,
    MatButtonModule
  ],
  templateUrl: './vulnerability-chart.component.html',
  styleUrls: ['./vulnerability-chart.component.scss']
})
export class VulnerabilityChartComponent implements OnInit, AfterViewInit {
  @ViewChild('chartCanvas') chartCanvas!: ElementRef<HTMLCanvasElement>;
  chart: Chart | undefined;

  // Mock data for vulnerabilities
  vulnerabilityData = {
    labels: ['Critical', 'High', 'Medium', 'Low', 'Info'],
    datasets: [
      {
        label: 'Current',
        data: [12, 28, 45, 67, 89],
        backgroundColor: [
          'rgba(255, 71, 87, 0.7)',
          'rgba(255, 165, 2, 0.7)',
          'rgba(255, 219, 88, 0.7)',
          'rgba(46, 213, 115, 0.7)',
          'rgba(0, 243, 255, 0.7)'
        ],
        borderColor: [
          'rgba(255, 71, 87, 1)',
          'rgba(255, 165, 2, 1)',
          'rgba(255, 219, 88, 1)',
          'rgba(46, 213, 115, 1)',
          'rgba(0, 243, 255, 1)'
        ],
        borderWidth: 1
      },
      {
        label: 'Previous',
        data: [15, 32, 40, 60, 75],
        backgroundColor: 'rgba(255, 255, 255, 0.1)',
        borderColor: 'rgba(255, 255, 255, 0.3)',
        borderWidth: 1,
        borderDash: [5, 5]
      }
    ]
  };

  constructor() { }

  ngOnInit(): void {
    // Initialize component
  }

  ngAfterViewInit(): void {
    this.createChart();
  }

  createChart(): void {
    const ctx = this.chartCanvas.nativeElement.getContext('2d');

    if (ctx) {
      // Register required Chart.js components
      Chart.defaults.color = '#e1e1e6';
      Chart.defaults.font.family = 'Roboto, "Helvetica Neue", sans-serif';

      const config: ChartConfiguration = {
        type: 'bar' as ChartType,
        data: this.vulnerabilityData,
        options: {
          responsive: true,
          maintainAspectRatio: false,
          indexAxis: 'x',
          plugins: {
            legend: {
              position: 'top',
              labels: {
                color: '#e1e1e6',
                font: {
                  family: 'Roboto, "Helvetica Neue", sans-serif'
                }
              }
            },
            tooltip: {
              backgroundColor: 'rgba(16, 18, 27, 0.8)',
              titleColor: '#ffffff',
              bodyColor: '#e1e1e6',
              borderColor: 'rgba(0, 243, 255, 0.3)',
              borderWidth: 1,
              padding: 10,
              displayColors: true,
              usePointStyle: true
            }
          },
          scales: {
            x: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#e1e1e6'
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#e1e1e6'
              }
            }
          },
          animation: {
            duration: 1000,
            easing: 'easeOutQuart'
          }
        }
      };

      this.chart = new Chart(ctx, config);
    }
  }

  refreshData(): void {
    if (this.chart) {
      // Simulate data refresh with random values
      const newData = [
        Math.floor(Math.random() * 20) + 5,
        Math.floor(Math.random() * 30) + 15,
        Math.floor(Math.random() * 40) + 25,
        Math.floor(Math.random() * 50) + 35,
        Math.floor(Math.random() * 60) + 45
      ];

      this.chart.data.datasets[0].data = newData;
      this.chart.update();
    }
  }
}
