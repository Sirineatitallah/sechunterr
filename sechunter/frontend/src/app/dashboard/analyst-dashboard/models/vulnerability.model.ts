export interface Vulnerability {
  id?: string;
  vulnerabilityName: string;
  cvssScore: number;
  severity: string;
  discoveredDate: string;
  cve_ids: string[];
  remediation: string | null;
  host_ip: string;
  description?: string;
  status?: string;
  affectedSystems?: string[];
  exploitAvailable?: boolean;
  patchAvailable?: boolean;
  references?: string[];
  lastUpdated?: string;
  assignedTo?: string;
  affectedAsset?: string;
  epss?: number;
  created_at?: string;
  updated_at?: string;
  cpe_list?: string;
  host_name?: string;
  plugin_family?: string;
  plugin_id?: string;
  port?: string;
  protocol?: string;
  service?: string;
}

export interface VulnerabilityFilter {
  severity?: string[];
  cvssMin?: number;
  cvssMax?: number;
  host?: string[];
  cve?: string;
  dateFrom?: string;
  dateTo?: string;
  remediation?: boolean;
  searchTerm?: string;
}

export interface VulnerabilitySummary {
  total: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
  remediationAvailable: number;
  remediationUnavailable: number;
  byHost: { [host: string]: number };
}

export interface VulnerabilityTrend {
  date: string;
  count: number;
  avgCvss: number;
}

export enum SeverityLevel {
  CRITICAL = 'critical',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low'
}

export function getSeverityFromCVSS(cvss: number): SeverityLevel {
  if (cvss >= 9.0) return SeverityLevel.CRITICAL;
  if (cvss >= 7.0) return SeverityLevel.HIGH;
  if (cvss >= 4.0) return SeverityLevel.MEDIUM;
  return SeverityLevel.LOW;
}

export function getSeverityColor(severity: string): string {
  switch (severity.toLowerCase()) {
    case 'critical': return '#e74c3c';
    case 'high': return '#f39c12';
    case 'medium': return '#3498db';
    case 'low': return '#2ecc71';
    default: return '#bdc3c7';
  }
}
