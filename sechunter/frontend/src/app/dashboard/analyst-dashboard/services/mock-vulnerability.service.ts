import { Injectable } from '@angular/core';
import { Observable, of, delay } from 'rxjs';
import { Vulnerability, SeverityLevel, getSeverityFromCVSS } from '../models/vulnerability.model';

@Injectable({
  providedIn: 'root'
})
export class MockVulnerabilityService {
  private mockVulnerabilities: Vulnerability[] = [];
  
  constructor() {
    this.generateMockData();
  }
  
  /**
   * Generate mock vulnerability data
   */
  private generateMockData(): void {
    // Common CVE IDs
    const cveIds = [
      'CVE-xx-1234', 'CVE-2023-5678', 'CVE-2023-9012', 'CVE-2023-3456',
      'CVE-2023-7890', 'CVE-2023-2345', 'CVE-2023-6789', 'CVE-2023-0123',
      'CVE-2023-4567', 'CVE-2023-8901', 'CVE-2023-2345', 'CVE-2023-6789'
    ];
    
    // Common vulnerability names
    const vulnNames = [
      'Remote Code Execution in Apache Log4j',
      'SQL Injection in MySQL',
      'Cross-Site Scripting in jQuery',
      'Buffer Overflow in OpenSSL',
      'Authentication Bypass in WordPress',
      'Command Injection in PHP',
      'Privilege Escalation in Linux Kernel',
      'Denial of Service in Nginx',
      'Information Disclosure in Apache Tomcat',
      'Path Traversal in Node.js',
      'Memory Corruption in Firefox',
      'Insecure Deserialization in Java'
    ];
    
    // Host IPs
    const hostIps = [
      '192.168.1.10', '192.168.1.11', '192.168.1.12', '192.168.1.13',
      '192.168.1.14', '192.168.1.15', '192.168.1.16', '192.168.1.17',
      '10.0.0.1', '10.0.0.2', '10.0.0.3', '10.0.0.4'
    ];
    
    // Remediation options
    const remediations = [
      'Update to the latest version',
      'Apply security patch',
      'Implement input validation',
      'Configure firewall rules',
      'Disable vulnerable feature',
      'Implement proper authentication',
      null, // No remediation available
      'Implement proper access controls',
      'Update configuration settings',
      'Apply vendor-provided fix',
      null, // No remediation available
      'Implement proper input sanitization'
    ];
    
    // Generate 50 mock vulnerabilities
    for (let i = 0; i < 50; i++) {
      const randomIndex = Math.floor(Math.random() * vulnNames.length);
      const cvssScore = Math.round((Math.random() * 9.9 + 0.1) * 10) / 10; // Random score between 0.1 and 10.0
      const severity = getSeverityFromCVSS(cvssScore);
      
      // Random date within the last 30 days
      const date = new Date();
      date.setDate(date.getDate() - Math.floor(Math.random() * 30));
      
      // Random number of CVE IDs (1-3)
      const numCves = Math.floor(Math.random() * 3) + 1;
      const selectedCves: string[] = [];
      for (let j = 0; j < numCves; j++) {
        const cveIndex = Math.floor(Math.random() * cveIds.length);
        if (!selectedCves.includes(cveIds[cveIndex])) {
          selectedCves.push(cveIds[cveIndex]);
        }
      }
      
      // Create vulnerability object
      const vulnerability: Vulnerability = {
        id: `vuln-${i + 1}`,
        vulnerabilityName: vulnNames[randomIndex],
        cvssScore,
        severity: severity.toString(),
        discoveredDate: date.toISOString(),
        cve_ids: selectedCves,
        remediation: remediations[Math.floor(Math.random() * remediations.length)],
        host_ip: hostIps[Math.floor(Math.random() * hostIps.length)],
        description: `This is a ${severity.toString().toLowerCase()} severity vulnerability that affects the system. ${vulnNames[randomIndex]} can lead to security issues if not addressed properly.`,
        status: Math.random() > 0.3 ? 'open' : 'fixed',
        exploitAvailable: Math.random() > 0.7,
        patchAvailable: Math.random() > 0.3
      };
      
      this.mockVulnerabilities.push(vulnerability);
    }
    
    // Sort by discovered date (newest first)
    this.mockVulnerabilities.sort((a, b) => 
      new Date(b.discoveredDate).getTime() - new Date(a.discoveredDate).getTime()
    );
  }
  
  /**
   * Get mock vulnerability data
   */
  getMockVulnerabilities(): Observable<Vulnerability[]> {
    // Simulate network delay
    return of([...this.mockVulnerabilities]).pipe(delay(1000));
  }
}

